{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = queries.map(function (options) {\n    var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions.optimisticResults = true;\n    return defaultedOptions;\n  });\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new QueriesObserver(queryClient, defaultedQueries);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, []);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries]);\n  return result;\n}","map":{"version":3,"names":["React","notifyManager","QueriesObserver","useQueryClient","useQueries","queries","mountedRef","useRef","_React$useState","useState","forceUpdate","queryClient","defaultedQueries","map","options","defaultedOptions","defaultQueryObserverOptions","optimisticResults","obsRef","current","result","getOptimisticResult","useEffect","unsubscribe","subscribe","batchCalls","x","setQueries","listeners"],"sources":["/Users/seanley/Desktop/Benchmetric/client/node_modules/react-query/es/react/useQueries.js"],"sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = queries.map(function (options) {\n    var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions.optimisticResults = true;\n    return defaultedOptions;\n  });\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new QueriesObserver(queryClient, defaultedQueries);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, []);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries]);\n  return result;\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;EAClC,IAAIC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAa,KAAb,CAAjB;;EAEA,IAAIC,eAAe,GAAGR,KAAK,CAACS,QAAN,CAAe,CAAf,CAAtB;EAAA,IACIC,WAAW,GAAGF,eAAe,CAAC,CAAD,CADjC;;EAGA,IAAIG,WAAW,GAAGR,cAAc,EAAhC;EACA,IAAIS,gBAAgB,GAAGP,OAAO,CAACQ,GAAR,CAAY,UAAUC,OAAV,EAAmB;IACpD,IAAIC,gBAAgB,GAAGJ,WAAW,CAACK,2BAAZ,CAAwCF,OAAxC,CAAvB,CADoD,CACqB;;IAEzEC,gBAAgB,CAACE,iBAAjB,GAAqC,IAArC;IACA,OAAOF,gBAAP;EACD,CALsB,CAAvB;EAMA,IAAIG,MAAM,GAAGlB,KAAK,CAACO,MAAN,EAAb;;EAEA,IAAI,CAACW,MAAM,CAACC,OAAZ,EAAqB;IACnBD,MAAM,CAACC,OAAP,GAAiB,IAAIjB,eAAJ,CAAoBS,WAApB,EAAiCC,gBAAjC,CAAjB;EACD;;EAED,IAAIQ,MAAM,GAAGF,MAAM,CAACC,OAAP,CAAeE,mBAAf,CAAmCT,gBAAnC,CAAb;EACAZ,KAAK,CAACsB,SAAN,CAAgB,YAAY;IAC1BhB,UAAU,CAACa,OAAX,GAAqB,IAArB;IACA,IAAII,WAAW,GAAGL,MAAM,CAACC,OAAP,CAAeK,SAAf,CAAyBvB,aAAa,CAACwB,UAAd,CAAyB,YAAY;MAC9E,IAAInB,UAAU,CAACa,OAAf,EAAwB;QACtBT,WAAW,CAAC,UAAUgB,CAAV,EAAa;UACvB,OAAOA,CAAC,GAAG,CAAX;QACD,CAFU,CAAX;MAGD;IACF,CAN0C,CAAzB,CAAlB;IAOA,OAAO,YAAY;MACjBpB,UAAU,CAACa,OAAX,GAAqB,KAArB;MACAI,WAAW;IACZ,CAHD;EAID,CAbD,EAaG,EAbH;EAcAvB,KAAK,CAACsB,SAAN,CAAgB,YAAY;IAC1B;IACA;IACAJ,MAAM,CAACC,OAAP,CAAeQ,UAAf,CAA0Bf,gBAA1B,EAA4C;MAC1CgB,SAAS,EAAE;IAD+B,CAA5C;EAGD,CAND,EAMG,CAAChB,gBAAD,CANH;EAOA,OAAOQ,MAAP;AACD"},"metadata":{},"sourceType":"module"}