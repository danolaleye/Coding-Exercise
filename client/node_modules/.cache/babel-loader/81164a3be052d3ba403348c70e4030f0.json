{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    obsRef.current.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result);\n  }\n\n  return result;\n}","map":{"version":3,"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","useBaseQuery","options","Observer","mountedRef","useRef","_React$useState","useState","forceUpdate","queryClient","errorResetBoundary","defaultedOptions","defaultQueryObserverOptions","optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","isReset","retryOnMount","obsRef","current","result","getOptimisticResult","useEffect","clearReset","unsubscribe","subscribe","x","updateResult","setOptions","listeners","isLoading","fetchOptimistic","then","_ref","data","catch","error","undefined","isError","notifyOnChangeProps","trackResult"],"sources":["/Users/seanley/Desktop/Benchmetric/client/node_modules/react-query/es/react/useBaseQuery.js"],"sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    obsRef.current.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result);\n  }\n\n  return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}